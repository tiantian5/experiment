1、String：在Redis中String是可以修改的，称为动态字符串(Simple Dynamic String 简称 SDS)，并且在其内部预分配了一定的空间，以减少内存的频繁分配。
内存分配机制：字符串的长度小于 1MB时，每次扩容都是加倍现有的空间；字符串长度超过 1MB时，每次扩容时只会扩展 1MB 的空间；
字符串最大长度为 512MB
常用命令有：set、get、del、exists、mset(批量存键值对)、mget(批量取key)、expire、setnx(如果key不存在则set 创建，否则返回0)、incr(每次自增1)、incrby(增加number)
数据结构：
struct SDS{
  T capacity;       //数组容量
  T len;            //实际长度
  byte flages;  //标志位,低三位表示类型
  byte[] content;   //数组内容
}

2、list(列表)：list和Java中的LinkedList很像，底层都是一种链表结构， list的插入和删除操作非常快，时间复杂度为 0(1)，不像数组结构插入、删除操作需要移动数据。
存储：据量较少的时候它的底层存储结构为一块连续内存，称之为ziplist(压缩列表)，它将所有的元素紧挨着一起存储，分配的是一块连续的内存；当数据量较多的时候将会变成quicklist(快速链表)结构。
应用场景：消息队列：lpop和rpush（或者反过来，lpush和rpop）能实现队列的功能；
        朋友圈的点赞列表、评论列表、排行榜：lpush命令和lrange命令能实现最新列表的功能，每次通过lpush命令往列表里插入新的元素，然后通过lrange命令读取最新的元素列表。
常用命令有：rpush(链表右侧插入)、rpop(移除右侧列表头元素，并返回该元素)、lpop(移除左侧列表头元素，并返回该元素)、llen(返回该列表的元素个数)、lrem(删除列表中与value相等的元素)、
          lindex(获取list指定下标的元素)、lrange(获取list 区间内的所有元素)、ltrim(保留区间内的元素，其他元素删除)

3、hash(字典)：Hash和 Java的 HashMap 更加相似，都是数组+链表的结构，当发生 hash 碰撞时将会把元素追加到链表上，值得注意的是在 Redis 的 Hash 中 value 只能是字符串；
应用场景：购物车：hset [key] [field] [value] 命令， 可以实现以用户Id，商品Id为field，商品数量为value，恰好构成了购物车的3个要素。
        存储对象：hash类型的(key, field, value)的结构与对象的(对象id, 属性, 值)的结构相似，也可以用来存储对象。
常用命令有：hset(新建字段信息)、hget(获取字段信息)、hdel(删除字段)、hlen(保存的字段个数)、hgetall(获取指定key)、hmset(批量创建)、hincr(对字段值自增)、hincrby(对字段值+number)

4、set(集合)：set和Java中的HashSet 有些类似，它内部的键值对是无序的、唯一 的。它的内部实现相当于一个特殊的字典，字典中所有的value都是一个值 NULL。当集合中最后一个元素被移除之后，数据结构被自动删除，内存被回收。
应用场景：存储某活动中中奖的用户ID ，因为有去重功能，可以保证同一个用户不会中奖两次
常用命令有：sadd(向指定key的set中添加元素)、smembers(获取指定key 集合中的所有元素)、sismember(判断集合中是否存在某个value)、scard(获取集合的长度)、spop(弹出一个元素)、srem(删除指定元素)

5、zset(有序集合):zset也叫SortedSet一方面它是个 set ，保证了内部 value 的唯一性，另方面它可以给每个 value 赋予一个score，代表这个value的排序权重。它的内部实现用的是一种叫作“跳跃列表”的数据结构。
应用场景:zset 可以用做排行榜，但是和list不同的是zset它能够实现动态的排序，例如： 可以用来存储粉丝列表，value 值是粉丝的用户 ID，score 是关注时间，我们可以对粉丝列表按关注时间进行排序。
        zset 还可以用来存储学生的成绩， value 值是学生的 ID, score 是他的考试成绩。 我们对成绩按分数进行排序就可以得到他的名次。
常用命令有：zadd(向指定key的集合中增加元素)、zrange(获取下标范围内的元素列表，按score 排序输出)、zrevrange(获取范围内的元素列表 ，按score排序 逆序输出)、zcard(获取集合列表的元素个数)、
          zrank(获取元素再集合中的排名)、zrangebyscore(输出score范围内的元素列表)、zrem(删除元素)、zscore(获取元素的score)