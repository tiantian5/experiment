一、Java类加载过程(7个过程)
1、类的加载
(1) 􏰨􏱼􏰒􏱄􏶺􏰻􏶽􏰐􏲖􏱾􏲑􏲒􏳦􏶺􏰻􏰕􏱉􏲫􏰑通过类的全名获取类的二进制流
(2) 将二进制流的静态存储结构转换为运行时数据结构
(3) 在内容中生成class对象，作为数据访问入口
2、验证(验证该二进制信息不会影响到虚拟机)
(1) 文件格式验证：文件是否符合class文件规范，版本号是否在虚拟机版本内，常量是否有不被支持的类型
(2) 元数据验证：语义分析，是否有父类，是否有继承了不被继承的类
(3) 字节码验证：类型转换是否正常，跳转指令是否正常
(4) 符号引用验证：确保解析动作正常进行
3、准备：类的静态变量分配内存并初始化默认值，这些内存都在方法区进行分配。该阶段中不分配实例变量内存(跟随对象实例化分配在堆中)
eg：public static int value=123;//􏱨􏷟􏷠􏶼􏳀 初始值是0，经过准备阶段就是123了
4、解析：􏳦􏶼􏳀􏵿􏱈􏶜􏵮􏷈􏷌􏷜􏱏􏴚􏵣􏲧􏷜􏱏􏰻􏲁􏲂􏳥􏲎􏱁􏷝􏷔􏳥􏲎􏰜完成符号引用到直接引用的转换(该动作可能是在初始化动作之后进行)
5、初始化：执行类中定义的Java程序代码
6、使用
7、卸载

二、Java内存分配
1、寄存器：无法控制
2、静态域：static定义的静态成员
3、常量池：编译时被保存到.class文件中的常量值(final)和一些文本修饰符号引用
4、非ARM存储：硬盘永久存储空间
5、堆内存：new创建的对象和数组，由Java虚拟机自动回收，存取速度慢
6、栈内存：基本类型的变量和对象的引用变量，可以共享，但是大小与生存期必须确定

三、JVM加载class文件的原理机制
class文件只有被加载到JVM才会被执行。当运行执行程序时，JVM会将编译生成的.class文件按照规则加载到内存中，组成一个完整的Java程序，
具体就是由ClassLoader和其子类完成，类的加载是动态的，并不是一次性全部加载完毕而是按需加载。

四、关于GC
GC是垃圾收集，自动检测对象是否超过作用域从而达到回收的目的。

五、Java垃圾回收机制
Java是不需要手动释放一个对象内存，是由虚拟机自动执行。在JVM中有一个垃圾回收线程，是低优先级的正常情况下不会执行，当虚拟机空闲或者堆内存不足
的时候，扫描没有被引用的对象并添加至回收集合进行回收。

六、JVM如何判断一个对象是否存活
1、引用计数法
给每个对象都设置一个计数器，每当有一个地方引用时计数器就会+1，引用失效就会-1。当一个对象计数器为0时就认为该对象是死对象，可以进行回收。
缺点就是循环引用，A引用B，B引用A，这样就无法完成回收，所以大多数虚拟机不会使用该方法。Python就使用该方法
2、可达性算法(引用链法)
该算法思想是GC Roots的对象向下搜索，若一个对象到GC Roots没有任何引用链相连时，说明对象不可用。
Java中可作为GC Roots的对象有这几种：虚拟机栈中引用对象；方法区静态区引用对象；方法区常量池引用对象；本地方法栈JNI引用对象。(引用概念参看强、软、弱、虚引用)
即使在可达性分析算法中不可达的对象，也并非是死对象，这时候这些对象将暂时处在暂缓阶段。一个对象的死亡需要进行至少两次标记过程：
(1) 对象在进行可达性分析之后发现没有与GC Roots相连的引用链，那么它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法
(2) 对象没有覆盖finalize()方法，或者finalize()方法已经被JVM调用过，虚拟机会认为这俩种情况都“没有必要执行”，此时的对象才是真正“死”的对象。
对象被判定为有必要执行finalize()方法，那么这个对象将会被放置在一个叫做F-Queue的队列之中，并在稍后由一个虚拟机自动建立的、低优先级的Finalizer线程去执行它（执行指的是虚拟机会触发finalize()方法）。
finalize()方法是对象逃脱“死亡”的最后一次机会，稍候GC将对F-Queue中的对象进行第二次小规模标记，如果对象在finalize()中成功自救（只需要重新与引用链上的任意一个对象建立起关联关系即可），那在第二次标记时，它将会被移除“即将回收”的集合；如果对象这个时候还是没有自救成功，那么就会被真正的回收了。

七、垃圾回收的优点
Java显著特点就是引入垃圾回收机制，解决类似C++内存溢出问题。
原理：垃圾回收器是作为一个单独的低级别的线程运行，在不可知的情况下对内存堆中已死亡的或者长期没有使用的对象回收，但是不能实时的对某一对象或者所有对象进行垃圾回收。
垃圾回收机制：分代复制垃圾回收、标记垃圾回收、增量垃圾回收


八、深拷贝和浅拷贝
深拷贝：对对象中存在的动态成员或者指针重新开辟内存空间
浅拷贝：对象中的数据成员进行简单的赋值操作，若存在动态成员或者指针就会报错

九、System.gc()和Runtime.gc()都做了什么
都是用来提示JVM垃圾回收，但是立即进行还是延时回收都是取决于JVM

十、finalize()什么时候被调用􏷔􏰚􏹿􏰪
垃圾回收器决定回收某对象时，就会运行改对象的finalize()，若JVM内存充足永远不会调用finalize()。finalize()的主要作用是回收特殊渠道申请的内存，比如JNI(C或者C++)
finalize()就是回收这部分内存。

十一、如果对象引用置为null，垃圾回收器是否立即释放对象占用的内存
不会，它会在下一个垃圾回收周期中进行回收。

十二、什么是分布式垃圾回收(DGC)，它是如何工作的
RMI(远程方法调用)使用DGC进行垃圾回收，RMI包含了跨虚拟机的远程对象引用，垃圾回收困难。DGC使用引用计数法进行给远程对象提供自动内存管理。

十三、串行收集器(serial)和吞吐量收集器(throughput)区别
吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序。而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了。

十四、Java内存分配、回收策略以及Minor GC 和 Major GC
(1) 对象优先分配在Eden区，当Eden区可用空间不够时会进行Minor GC
(2) 大对象直接进入老年代（大对象即需要大量连续内存空间的对象）
(3) 长期存活的对象将进入老年代
Minor GC通常发生在新生代的Eden区，这个区的对象生存期短，GC频率比较高。Full GC/Major GC 发生在老年代，触发老年代GC的时候不会触发MinorGC，若通过配置可在Full GC前进行一次Minor GC这样可以加快老年代的回收速度

十五、类加载器类型
类加载器：通过类的全名获取类的二进制流
(1) 启动类加载器：BootstrapClassLoader用来加载核心类库，Java程序无法直接引用
(2) 扩展类加载器：extensions class loader用来加载Java的扩展库
(3) 系统类加载器：system class loader加载Java类路径的类，Java类一般都是该类型加载可以通过ClassLoader.getSystemClassLoader()进行获取
(4) 自定义类加载器：通过继承java.lang.ClassLoader的方式实现

十六、类加载器双亲委派模型机制
当一个类收到加载请求时，不会自己去加载这个类，而是委派给父类，由父类去加载，如果父类不能加载就会反馈给子类由子类加载。