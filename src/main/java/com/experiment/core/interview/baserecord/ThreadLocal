ThreadLocal：
1、内存泄露：主要的原因在于它的内部类ThreadLocalMap中的Entry的设计。Entry继承了WeakReference<ThreadLocal<?>>，即Entry的key是弱引用，所以key会在垃圾回收的时候被回收掉，
而key对应的value则不会被回收， 这样会导致一种现象：key为null，value有值。value累加就会导致内存泄漏

        static class Entry extends WeakReference<ThreadLocal<?>> {
            Object value;
            Entry(ThreadLocal<?> k, Object v) {
                super(k);
                value = v;
            }
        }

2、如何避免内存泄露：每次使用完ThreadLocal都调用它的remove()方法清除数据，会将key和value都清除掉。

        private void remove(ThreadLocal<?> key) {
            Entry[] tab = table;
            int len = tab.length;
            int i = key.threadLocalHashCode & (len-1);
            for (Entry e = tab[i];
                 e != null;
                 e = tab[i = nextIndex(i, len)]) {
                if (e.get() == key) {
                    e.clear();
                    expungeStaleEntry(i);
                    return;
                }
            }
        }

3、开发者是如何避免内存泄漏：ThreadLocal提供的get()方法举例，它调用了ThreadLocalMap#getEntry()方法，对key进行了校验和对null key进行擦除
    set也是如此；如果key为null， 则会调用getEntryAfterMiss()方法，在这个方法中，如果k == null ， 则调用expungeStaleEntry(i);方法
    expungeStaleEntry(i)方法完成了对key=null 的key所对应的value进行赋空， 释放了空间避免内存泄漏
4、手动释放ThreadLocal遗留存储?你怎么去设计
包装其父类remove方法为静态方法，如果是spring项目， 可以借助于bean的声明周期， 在拦截器的afterCompletion阶段进行调用。
那为什么不将key值设置为强引用？如果key设置为强引用， 当threadLocal实例释放后， threadLocal=null， 但是threadLocal会有强引用指向threadLocalMap，
threadLocalMap.Entry又强引用threadLocal， 这样会导致threadLocal不能正常被GC回收
5、Thread和ThreadLocal有什么联系：Thread和ThreadLocal是绑定的， ThreadLocal依赖于Thread去执行， Thread将需要隔离的数据存放到ThreadLocal(准确的讲是ThreadLocalMap)中, 来实现多线程处理
额外点：TransmittableThreadLocal
    使用场景分布式跟踪系统、应用容器或上层框架跨应用代码给下层SDK传递信息、日志收集记录系统上下文
    用于解决 “在使用线程池等会缓存线程的组件情况下传递ThreadLocal”