HashMap面试问题
1、HashMap的数据结构
哈希表结构(链表散列：数组+链表)实现，结合数组的链表的优点，当链表长度超过8时，链表转换为红黑树
transient Node<K,V>[] table;

2、HashMap的工作原理
HashMap底层都是hash数组和单向链表实现，数组中的每个元素都是链表，由Node内部类(实现Map.Entry<K,V>接口)实现，
HashMap通过get & put方式来取存。
存储对象时，将K/V键值对传给put()方法：
(1)调用hash(k)方法计算k的hash值，结合数组长度计算得到数组的下标
(2)调整数据大小(当容器中元素个数大于capacity * loadfactor时，容器会进行扩容为2n)
(3)如果k的hash值在HashMap中不存在，则执行插入，若存在则发生碰撞
   如果k的hash值在HashMap中存在，且两者equals返回true，则更新键值对
   如果k的hash值在HashMap中存在，且两者equals返回false，则插入链表的尾部(尾插法)或者红黑树中(树的添加方式)

   JDK1.7之前使用头插法，JDK1.8使用尾插法(当碰撞导致链表大于 TREEIFY_THRESHOLD = 8 时，就把链表转换成红黑树)

获取对象时，将k传给get(方法)
(1)调用hash(k)方法(计算k的hash值)从而获取该键值所在链表的数组下标
(2)顺序遍历链表，equals方法查找相同Node链表中的k值对应的V值

hashCode 是定位的，存储位置；equals是定性的，比较两者是否相等。

3、当两个对象的hashCode相同会发生什么
(1)因为hashCode相同，不一定就是相等的需要用equals方法进行比较，所以两个对象所在数组的下标相同,发生碰撞。
(2)HashMap使用链表存储对象，这个Node会存储到链表中

4、hash的实现
JDK1.8中是通过hashCode()的高16位异或低16位实现的(h = k.hashCode()) ^ (h >>> 16) ，主要是从速度、质量考虑减少系统开销，
不会造成因为高位没有参与下标的计算，从而引起碰撞

5、为什么使用异或运算符
保证对象hashCode的32位值只要有一位发生变化，整个hash()返回值就会改变，尽可能减少碰撞

6、HashMap 的 table 的容量如何确定？loadFactor 是什么？该容量如何变化？这种变化会带来什么问题？
(1)table数组大小是由capacity参数决定，默认为16，可以在构造时传入，最大限制是1<<30
(2)loadFactor是装载因子，主要目的是用来确认table数组是否需要动态扩展，默认值是0.75
(3)扩容时，调用resize()方法，将table长度变为原来的两倍
(4)如果数据很大，扩展将会带来性能的损失

7、数组扩容的过程
创建一个新的数组，其容量是旧数组的两倍，并重新计算数组中结点的存储位置。结点在新的数组中的位置是原下标位置或者原下标+旧数组的大小

8、拉链法导致的链表过深问题为什么不用二叉查找树代替，而选择红黑树？为什么不一直使用红黑树？
选择红黑树主要是解决二叉树在特殊情况下很变成一条线结构(如同链表)这样会造成查询慢。而红黑树需要通过左旋、右旋、变色操作保持平衡，
来查询更快。为了保持平衡付出性能是比较大的。所以当长度大于8的时候用红黑树，若链表很短不需要引入红黑树

9、红黑树的见解
(1)每个节点非红即黑
(2)根节点总是黑的
(3)若节点是红，则子节点必黑(反之不一定)
(4)每个叶子节点都是黑的空节点(NIL节点)
(5)从根节点到叶节点的每条路径，必须包含相同数目的黑节点(即相同的黑色高度)

10、JDK1.8对HashMap做了什么变化
(1)若链表长度超过了8，那么链表将转为红黑树(桶数据必须大于64，小于64只会扩容)
(2)发生hash碰撞时，JDK1.7是在链表的头部插入，JDK1.8是在链表的尾部插入
(3)JDK1.8中，Entry被Node替换

11、HashMap，LinkedHashMap，TreeMap 有什么区别
LinkedHashMap保存了记录的插入顺序，在使用Iterator遍历时，先取到的记录肯定是先插入的。遍历比HashMap慢
TreeMap实现的是SortMap，能够把它保存的记录根据键排序(默认是升序)

12、HashMap 和 HashTable 有什么区别
(1)HashMap是线程不安全的，HashTable是线程安全的
(2)由于线程安全，所以 HashTable 的效率比不上 HashMap
(3)HashMap最多只允许一条记录的键为null，允许多条记录的值为null，而 HashTable不允许
(4)HashMap 默认初始化数组的大小为16，HashTable 为 11，前者扩容时，扩大两倍，后者扩大两倍+1；
(5)HashMap 需要重新计算 hash 值，而 HashTable 直接使用对象的 hashCode

13、HashMap & ConcurrentHashMap 的区别
除了加锁，原理上无太大区别。另外，HashMap 的键值对允许有null，但是ConCurrentHashMap 都不允许。
ConcurrentHashMap，在 JDK 1.7 中采用 分段锁的方式；JDK 1.8 中直接采用了CAS（无锁算法）+ synchronized。

14、为什么 ConcurrentHashMap 比 HashTable 效率要高
HashTable 使用一把锁（锁住整个链表结构）处理并发问题，多个线程竞争一把锁，容易阻塞；
ConcurrentHashMap
    JDK 1.7 中使用分段锁（ReentrantLock + Segment + HashEntry），相当于把一个 HashMap 分成多个段，
    每段分配一把锁，这样支持多线程访问。锁粒度：基于 Segment，包含多个 HashEntry

    JDK 1.8 中使用 CAS + synchronized + Node + 红黑树。锁粒度：Node（首结点）（实现 Map.Entry<K,V>）。锁粒度降低了。

15、ConcurrentHashMap 在 JDK 1.8 中，为什么要使用内置锁 synchronized 来代替重入锁 ReentrantLock？
(1)粒度降低了；
(2)JVM 的 synchronized 优化空间更大，更加自然。
(3)大量的数据操作下，对于 JVM 的内存压力，基于 API 的 ReentrantLock 会开销更多的内存。

16、ConcurrentHashMap
(1)重要常量
private transient volatile int sizeCtl;
当为负数时，-1 表示正在初始化，-N 表示 N - 1 个线程正在进行扩容
当为 0 时，表示 table 还没有初始化
当为其他正数时，表示初始化或者下一次进行扩容的大小

(2)数据结构
Node 是存储结构的基本单元，继承 HashMap 中的 Entry，用于存储数据
TreeNode 继承 Node，但是数据结构换成了二叉树结构，是红黑树的存储结构，用于红黑树中存储数据；
TreeBin 是封装 TreeNode 的容器，提供转换红黑树的一些条件和锁的控制

(3)存储对象时
    如果没有初始化，就调用 initTable() 方法来进行初始化；
    如果没有 hash 冲突就直接 CAS 无锁插入；
    如果需要扩容，就先进行扩容；
    如果存在 hash 冲突，就加锁来保证线程安全，两种情况：一种是链表形式就直接遍历到尾端插入，一种是红黑树就按照红黑树结构插入；
    如果该链表的数量大于阀值 8，就要先转换成红黑树的结构，break 再一次进入循环
    如果添加成功就调用 addCount() 方法统计 size，并且检查是否需要扩容

(4)扩容方法
transfer()：默认容量为 16，扩容时，容量变为原来的两倍
helpTransfer()：调用多个工作线程一起帮助进行扩容，这样的效率就会更高

(5)获取对象时
计算 hash 值，定位到该 table 索引位置，如果是首结点符合就返回
如果遇到扩容时，会调用标记正在扩容结点 ForwardingNode.find()方法，查找该结点，匹配就返回；
以上都不符合的话，就往下遍历结点，匹配就返回，否则最后就返回 null。
