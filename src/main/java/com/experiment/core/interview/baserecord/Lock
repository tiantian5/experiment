1 乐观锁 CAS：是一种乐观思想，假定当前环境是读多写少，遇到并发写的概率比较低，读数据时认为别的线程不会正在进行修改（所以没有上锁）
2 悲观锁 synchronized、vector、hashtable：是一种悲观思想，即认为写多读少，遇到并发写的可能性高，每次去拿数据的时候都认为其他线程会修改，所以每次读写数据都会认为其他线程会修改，所以每次读写数据时都会上锁。其他线程想要读写这个数据时，会被这个线程block，直到这个线程释放锁然后其他线程获取到锁。
3 自旋锁 CAS：次数默认值：10次，可以使用参数-XX:PreBlockSpin来自行更改。
4 可重入锁  synchronized、Reentrantlock、Lock：若拿了两把锁，释放一把则会程序卡死；若拿了一把锁释放了两把则会报java.lang.IllegalMonitorStateException异常。
5 读写锁 ReentrantReadWriteLock，CopyOnWriteArrayList、CopyOnWriteArraySet：读写锁分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由 jvm 自己控制的。
6 公平锁 Reentrantlock(true)
7 非公平锁  synchronized、reentrantlock(false)：非公平锁的性能高于公平锁。可能会造成线程饥饿(长时间得不到锁)；synchronized是非公平锁，ReentrantLock通过构造函数指定该锁是公平的还是非公平的，默认是非公平的。
8 共享锁 ReentrantReadWriteLock中读锁
9 独占锁 synchronized、vector、hashtable、ReentrantReadWriteLock中写锁
10  重量级锁  synchronized
11  轻量级锁  锁优化技术
12  偏向锁 锁优化技术
13  分段锁 concurrentHashMap
14  互斥锁 synchronized
15  同步锁 synchronized
16  死锁  相互请求对方的资源
17  锁粗化 锁优化技术
18  锁消除 锁优化技术
synchronized是Java中的关键字：用来修饰方法、对象实例。属于独占锁、悲观锁、可重入锁、非公平锁。
  作用于实例方法时，锁住的是对象的实例(this)；
  当作用于静态方法时，锁住的是 Class类，相当于类的一个全局锁， 会锁所有调用该方法的线程；
  synchronized 作用于一个非 NULL的对象实例时，锁住的是所有以该对象为锁的代码块。它有多个队列，当多个线程一起访问某个对象监视器的时候，对象监视器会将这些线程存储在不同的容器中。

-- Lock和synchronized的区别
Lock： 是Java中的接口，可重入锁、悲观锁、独占锁、互斥锁、同步锁。
    1、Lock需要手动获取锁和释放锁。
    2、Lock 是一个接口，而 synchronized 是 Java 中的关键字， synchronized 是内置的语言实现。
    3、synchronized 在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而 Lock 在发生异常时，如果没有主动通过 unLock()去释放锁，则很可能造成死锁现象，因此使用 Lock 时需要在 finally 块中释放锁
    4、Lock 可以让等待锁的线程响应中断，而 synchronized 却不行，使用 synchronized 时，等待的线程会一直等待下去，不能够响应中断。
    5、通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到
    6、Lock 可以通过实现读写锁提高多个线程进行读操作的效率

-- ReentrantLock 和synchronized的区别
ReentrantLock是Java中的类 ： 继承了Lock类，可重入锁、悲观锁、独占锁、互斥锁、同步锁。
    1.主要解决共享变量如何安全访问的问题
    2.都是可重入锁，也叫做递归锁，同一线程可以多次获得同一个锁，
    3.保证了线程安全的两大特性：可见性、原子性。

    1.ReentrantLock 就像手动汽车，需要显示的调用lock和unlock方法， synchronized 隐式获得释放锁。
    2.ReentrantLock 可响应中断， synchronized 是不可以响应中断的，ReentrantLock 为处理锁的不可用性提供了更高的灵活性
    3.ReentrantLock 是 API 级别的， synchronized 是 JVM 级别的
    4.ReentrantLock 可以实现公平锁、非公平锁，默认非公平锁，synchronized 是非公平锁，且不可更改。
    5.ReentrantLock 通过 Condition 可以绑定多个条件